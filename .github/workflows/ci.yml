name: CI

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Run unit tests
        run: npm test
      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
  publish_to_docker_hub:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: andygrails
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: |
            andygrails/andy-grails-frontend:latest
            andygrails/andy-grails-frontend:${{ needs.test.outputs.sha_short }}
      - name: Confirm Docker image is on Docker Hub
        run: |
          echo "üîç Verifying Docker image exists on Docker Hub by pulling it..."
          docker pull andygrails/andy-grails-frontend:${{ needs.test.outputs.sha_short }} \
            && echo "‚úÖ Docker image pulled successfully." \
            || (echo "‚ùå Failed to pull Docker image." && exit 1)
  update_parent_repo:
    runs-on: ubuntu-latest
    needs: publish_to_docker_hub
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Trigger parent repo to update submodule
        run: |
          set -e  # Fail the job if any command fails
          # Prepare the JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "event_type": "update_frontend_rev",
            "client_payload": {
              "frev": "${{ github.sha }}",
              "ref": "refs/heads/master"
            }
          }
          EOF
          )
          echo "PAYLOAD: $PAYLOAD"
          # Send the API request
            RESPONSE=$(curl -w "%{http_code}" -X POST https://api.github.com/repos/aistomin/andy.grails/dispatches \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD")
          # Get the HTTP status code
          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)  # Get the last line, which is the HTTP response code
          if [[ "$HTTP_CODE" -ne 200 ]] && [[ "$HTTP_CODE" -ne 204 ]]; then
            echo "‚ùå Error: Received HTTP status code $HTTP_CODE from GitHub API:"
            echo $RESPONSE
            exit 1  # Force the job to fail
          else
            echo "‚úÖ GitHub API call was successful with HTTP status code: $HTTP_CODE"  
          fi
